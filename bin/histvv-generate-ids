#!/usr/bin/perl

use strict;
use warnings;

use Histvv;
use Histvv::CLI;
use XML::LibXML;
use XML::LibXML::XPathContext;

my $cli = Histvv::CLI->new();
my %opts = $cli->get_opts( 'list|l' => 0, 'write|w' => 0 );

my $file = shift or $cli->error( 'Please specify a file!' );

# regex matching titel numbers
my $numrx =
  qr/^\s*((?:[IVX]+|[0-9]+|[a-zA-z]+|[*]+|\p{Greek}+)(?=[.)]\s)|[*]+(?=\s))/;

# transliteration of special characters
my %translit = (
    '*' => 'x',
    # Greek
    "\x{03B1}" => 'alpha',
    "\x{03B2}" => 'beta',
    "\x{03B3}" => 'gamma',
    "\x{03B4}" => 'delta',
    "\x{03B5}" => 'epsilon',
    "\x{03B6}" => 'zeta',
    "\x{03B7}" => 'eta',
    "\x{03B8}" => 'theta',
    "\x{03B9}" => 'iota'
);

my $doc = XML::LibXML->new->parse_file($file);
my $xc = XML::LibXML::XPathContext->new($doc);
$xc->registerNs('v', $Histvv::XMLNS);
$xc->registerFunctionNS('num', $Histvv::XMLNS, \&_num);

my $jahr = $xc->findvalue('/v:vv/v:kopf/v:beginn/v:jahr')
  || die "Cannot find element 'beginn/jahr'\n";
my $sem = $xc->findvalue('/v:vv/v:kopf/v:semester')
  || die "Cannot find element 'semester'\n";
my $prefix = sprintf "%s%s", $jahr, $sem eq 'Winter' ? 'w' : 's';

binmode STDOUT, ":utf8" if $opts{list};
my %cnt;

foreach my $sg ($xc->findnodes('//v:sachgruppe')) {
    my $id = get_sgid($sg);
    die "ID '$id' is not unique\n" if $cnt{$id}++;
    $sg->setAttribute('xml:id', $id);
    if ($opts{list}) {
        my $titel = $xc->findvalue('normalize-space(string(v:titel))', $sg);
        printf "%-20s  %s\n", $id, $titel;
    }

    my $vxpath = q{ v:veranstaltung |
                    v:veranstaltungsgruppe//v:veranstaltung |
                    v:absatz/v:veranstaltung };

    my $n = 0;
    foreach my $v ($xc->findnodes($vxpath, $sg)) {
        my $vid = sprintf '%s-%03d', $id, ++$n;
        $vid =~ s/^sg-/v-/;
        $v->setAttribute('xml:id', $vid);
        if ($opts{list}) {
            my $thema = $xc->findvalue('normalize-space(string(v:thema))', $v);
            printf "   %-20s  %s\n", $vid, $thema;
        }
    }
}

print $doc->toString(0) unless $opts{list} || $opts{write};

# check for missing xml:id attributes
my $err_sg = $xc->findvalue('count(//v:sachgruppe[not(@xml:id)])');
warn "$err_sg elements of type 'sachgruppe' without xml:id\n"
  if $err_sg > 0;
my $err_v = $xc->findvalue('count(//v:veranstaltung[not(@xml:id)])');
warn "$err_v elements of type 'veranstaltung' without xml:id\n"
  if $err_v > 0;

# write document back
if ($opts{write}) {
    open F, ">$file" or die "Cannot write to $file: $!\n";
    print F $doc->toString(0);
    close F;
}

#
# determine ID for 'sachgruppe'
#
my %track;
sub get_sgid {
    my $sg = shift;
    my $num = get_sgnum($sg);

    my $id;
    if (my $parent = $xc->findvalue('parent::v:sachgruppe/@xml:id', $sg)) {
        $id = "$parent.$num";
    } else {
        $id = "sg-$prefix-$num";
    }
    # deal with inconsistent numbering
    $id .= "_$track{$id}" if ($track{$id}++);

    return $id;
}

#
# determine number for single 'sachgruppe'
#
sub get_sgnum {
    my $node = shift;

    my $xpath = <<EOT;
count(preceding-sibling::v:sachgruppe
        [ v:titel and not(v:num(v:titel)) ]) + 1
EOT

    my $num = $xc->findvalue( 'v:num(v:titel)', $node )
      || sprintf( '%03d', $xc->findvalue( $xpath, $node ) );

    $num =~ s/([\x{03B1}-\x{03B9}*])/$translit{$1}/g;
    $num;
}

#
# callback for custom XPath function
#
sub _num  {
    my $nodelist =  shift;
    my ($node) =  $nodelist->get_nodelist();
    if ($node->textContent =~ $numrx) {
        return $1;
    } else {
        return undef;
    }
}

__END__

=head1 NAME

histvv-generate-ids - add C<xml:id> attributes to histvv documents

=head1 SYNOPSIS

  histvv-generate-ids [--list] [--write] file.xml
  histvv-generate-ids --help | --man

=head1 DESCRIPTION

I<histvv-generate-ids> sets C<xml:id> attributes for the elements
C<sachgruppe> and C<veranstaltung> in a histvv document. Without any
options the modified document is printed to standard output.

The generated IDs are based on the section numbers of the document.
Inconsistencies in the original numbering are detected and worked
around to ensure uniqueness. Greek letters are transliterated.

The IDs for C<sachgruppe> are prefixed with C<sg-> while the IDs for
C<veranstaltung> get a C<v-> prefix. Both prefixes are followed by a
semester identifier.

=head1 OPTIONS

=over

=item B<--list>, B<-l>

Display generated IDs and corresponding section titles
(C<sachgruppe/titel> or C<veranstaltung/thema>) on standard output.

=item B<--write>, B<-w>

Write the modified document to disk.

=item B<--verbose>, B<-v>

Verbose feedback.

=item B<--help>, B<-h>

Display short help message and exit. If used together with B<-v> the
entire manpage will be displayed.

=item B<--man>

Display manpage and exit. This is equivalent to B<-h> B<-v>.

=back

=head1 SEE ALSO

L<Histvv::Db>

=head1 AUTHOR

Carsten Milling, C<< <cmil at hashtable.de> >>

=head1 COPYRIGHT & LICENSE

Copyright 2008 Carsten Milling, all rights reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut
