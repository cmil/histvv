#!/usr/bin/env node
/*
 * histvv
 *
 * Copyright (C) 2018 Leipzig University Library <info@ub.uni-leipzig.de>
 *
 * Author: Carsten Milling <cmil@hashtable.de>
 *
 * This file is part of histvv.
 *
 * Histvv is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Histvv is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Module dependencies.
 */

const http = require('http');
const waitOn = require('wait-on');
const debug = require('debug')('histvv:server');
const config = require('../config');
const app = require('../app');
const annotate = require('../annotate');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.port || process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

(async function () {
  const {
    db: {
      name: dbname,
      port,
      host,
      user: username,
      password
    }
  } = config;

  try {
    const url = `http-get://${host}:${port}/rest/${dbname}`;
    debug(`waiting for ${url}`);
    await waitOn({
      resources: [url],
      interval: 1000,
      timeout: 30000,
      window: 1500,
      auth: {username, password}
    });
    debug('database available');
  } catch (error) {
    debug('database not available');
    console.log(error);
    process.exit(1);
  }

  // eslint-disable-next-line promise/prefer-await-to-then
  annotate().then(n => {
    console.log('all documents prepared (%s new)', n);
  }).catch(error => {
    console.warn(error);
  });
})();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      // cannot fall through
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      // cannot fall through
    default:
      console.log(error);
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
